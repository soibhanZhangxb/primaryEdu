import{d as Y,a as r,p as Q,n as Z,m as tt,k as w,e as h,g as l,f as p,w as _,h as y,b as $,i as et,F as z,l as E,aP as lt,t as x,j as I,_ as at}from"./index-DkZ5200C.js";const ot={class:"flex flex-col md:flex-row gap-6 p-4 bg-gray-50 shadow mkonva"},st={class:"flex-1"},nt={class:"border rounded-lg overflow-hidden bg-white"},it={class:"relative"},ut={class:"w-full md:w-80 space-y-6"},vt={class:"bg-white p-4 rounded-lg shadow border-left-blue"},ct={class:"space-y-3"},ft={class:"flex items-center justify-between h-full"},rt={class:"text-xl font-mono font-bold text-blue-600"},gt={class:"flex items-center justify-between h-full"},ht={class:"text-xl font-mono font-bold text-blue-600"},dt={class:"bg-white p-4 rounded-lg shadow"},pt={class:"space-y-4"},mt={class:"block text-sm font-medium text-gray-700 mb-1"},yt={class:"bg-white p-4 rounded-lg shadow"},_t={class:"step-controls"},xt={class:"mt-3 text-center text-sm text-gray-600"},bt={class:"bg-white p-4 rounded-lg shadow"},wt={class:"result-box"},$t={class:"text-sm font-medium text-gray-700"},kt=Y({__name:"stairs",setup(St){const v=r(5),i=r([]),N=r([]),k=r([]),a=r([]),c=r(0),m=r(!1),A=r(0),u=r([]),S=r('点击"计算方式"开始演示'),C=r(!1),T=r(""),B=r({x:0,y:0}),U=Q(()=>c.value>0&&u.value.length>0),q=Q(()=>c.value<u.value.length-1&&u.value.length>0),L=r({width:700,height:500}),D=()=>{i.value=[];const t=60,e=35,f=100,o=100;for(let s=0;s<=v.value;s++){const d=f+s*t,V=o+(v.value-s)*e;i.value.push({config:{x:d,y:V,width:t,height:e,fill:s===0?"#95de64":s===v.value?"#ff7875":"#e8e8e8",stroke:"#d9d9d9",strokeWidth:2},ways:s<=1?s:0,highlight:!1})}a.value=new Array(v.value+1).fill(0),a.value[0]=0,a.value[1]=1,v.value>=2&&(a.value[2]=2)},G=t=>{if(t<2||a.value[t]===0)return;k.value=[],C.value=!1,i.value.forEach((s,d)=>{s.highlight=d===t||d===t-1||d===t-2});const e=i.value[t],f=i.value[t-1],o=i.value[t-2];f&&H(f.config.x+f.config.width/2,f.config.y+f.config.height/2,e.config.x+e.config.width/2,e.config.y+e.config.height/2,-30),o&&H(o.config.x+o.config.width/2,o.config.y+o.config.height/2,e.config.x+e.config.width/2,e.config.y+e.config.height/2,30),T.value=`f(${t}) = f(${t-1}) + f(${t-2}) = ${a.value[t-1]} + ${a.value[t-2]} = ${a.value[t]}`,B.value={x:e.config.x+e.config.width+10,y:e.config.y},C.value=!0,S.value=`从第${t-1}层和第${t-2}层可以到达第${t}层，方式数相加得到f(${t})=${a.value[t]}`},H=(t,e,f,o,s)=>{const d=(t+f)/2,V=(e+o)/2+s,F=`M ${t} ${e} Q ${d} ${V} ${f} ${o}`;k.value.push({data:F,stroke:"#1890ff",strokeWidth:3,fill:"transparent",pointerLength:10,pointerWidth:10})},J=()=>{j(),u.value=[],u.value.push({explanation:"初始状态：在第0层有0种方式，在第1层有1种方式",highlight:[0,1]}),v.value>=2&&u.value.push({explanation:"在第2层有2种方式：一次爬2阶，或分两次各爬1阶",highlight:[2],ways:2,from:[0,1]});for(let t=3;t<=v.value;t++)u.value.push({explanation:`计算到达第${t}层的方式：f(${t}) = f(${t-1}) + f(${t-2}) = ${a.value[t-1]} + ${a.value[t-2]} = ${a.value[t-1]+a.value[t-2]}`,highlight:[t],from:[t-1,t-2],ways:a.value[t-1]+a.value[t-2]}),a.value[t]=a.value[t-1]+a.value[t-2];u.value.push({explanation:`最终结果：到达第${v.value}层有${a.value[v.value]}种方式`,highlight:[v.value]}),c.value=0,P()},P=()=>{if(c.value>=u.value.length||u.value.length===0){m.value=!1;return}const t=u.value[c.value];if(S.value=t.explanation,i.value.forEach(e=>{e.highlight=!1}),t.highlight&&t.highlight.forEach(e=>{i.value[e]&&(i.value[e].highlight=!0)}),t.ways!==void 0&&t.highlight&&t.highlight.length===1){const e=t.highlight[0];i.value[e].ways=t.ways,a.value[e]=t.ways}N.value=[],t.from&&t.from.forEach(e=>{const f=t.highlight[0];if(i.value[e]&&i.value[f]){const o=i.value[e],s=i.value[f];N.value.push({points:[o.config.x+o.config.width/2,o.config.y+o.config.height/2,s.config.x+s.config.width/2,s.config.y+s.config.height/2],pointerLength:10,pointerWidth:10,fill:"#1890ff",stroke:"#1890ff",strokeWidth:3})}}),c.value===u.value.length-1&&(A.value=a.value[v.value]),k.value=[],C.value=!1};let b=null;const K=()=>{m.value?(clearInterval(b),m.value=!1):(c.value>=u.value.length&&(c.value=0),m.value=!0,b=setInterval(()=>{c.value<u.value.length-1?(c.value++,P()):(clearInterval(b),m.value=!1)},2e3))},O=()=>{M(),c.value>0&&(c.value--,P())},R=()=>{M(),c.value<u.value.length-1&&(c.value++,P())},M=()=>{m.value=!1,b&&(clearInterval(b),b=null)},j=()=>{M(),c.value=0,D(),A.value=0,S.value='点击"计算方式"开始演示',N.value=[],k.value=[],C.value=!1,u.value=[]};return Z(v,()=>{j()}),tt(()=>{D()}),(t,e)=>{const f=y("v-rect"),o=y("v-text"),s=y("v-arrow"),d=y("v-path"),V=y("v-layer"),F=y("v-stage"),X=y("el-slider"),W=y("el-button");return h(),w("div",ot,[l("div",st,[l("div",nt,[l("div",null,[e[1]||(e[1]=l("div",{class:"p-2 flex justify-between items-center border-left-blue"},[l("div",{class:"bg-gray"},"爬楼梯算法可视化 - 动态规划方法")],-1)),l("div",it,[p(F,{ref:"stage",config:L.value},{default:_(()=>[p(V,null,{default:_(()=>[(h(!0),w(z,null,E(i.value,(n,g)=>(h(),$(f,{key:"stair-"+g,config:n.config,onClick:Ct=>G(g)},null,8,["config","onClick"]))),128)),(h(!0),w(z,null,E(i.value,(n,g)=>(h(),$(o,{key:"label-"+g,config:{x:n.config.x+n.config.width/2-10,y:n.config.y+n.config.height/2-10,text:g.toString(),fontSize:16,fill:"#333"}},null,8,["config"]))),128)),(h(!0),w(z,null,E(i.value,(n,g)=>(h(),$(o,{key:"ways-"+g,config:{x:n.config.x+n.config.width/2-15,y:n.config.y+n.config.height/2+15,text:"f("+g+")="+n.ways,fontSize:14,fill:n.highlight?"#1890ff":"#666"}},null,8,["config"]))),128)),(h(!0),w(z,null,E(N.value,(n,g)=>(h(),$(s,{key:"arrow-"+g,config:n},null,8,["config"]))),128)),(h(!0),w(z,null,E(k.value,(n,g)=>(h(),$(d,{key:"curve-"+g,config:n},null,8,["config"]))),128)),C.value?(h(),$(o,{key:0,config:{x:B.value.x,y:B.value.y,text:T.value,fontSize:18,fill:"#ff4d4f",fontStyle:"bold"}},null,8,["config"])):et("",!0),p(o,{config:{x:20,y:L.value.height-40,text:S.value,fontSize:18,fill:"#333",width:L.value.width-40}},null,8,["config"])]),_:1})]),_:1},8,["config"])])])])]),l("div",ut,[l("div",vt,[e[4]||(e[4]=l("h3",{class:"text-lg font-semibold mb-4 text-gray-800"},"算法信息:",-1)),l("div",ct,[l("div",ft,[e[2]||(e[2]=l("p",{class:"text-sm text-gray-600"},"楼梯层数",-1)),l("p",rt,x(v.value),1)]),l("div",gt,[e[3]||(e[3]=l("p",{class:"text-sm text-gray-600"},"总方式数",-1)),l("p",ht,x(A.value),1)])])]),l("div",dt,[e[6]||(e[6]=l("h3",{class:"text-lg font-semibold mb-4 text-gray-800"},"参数控制",-1)),l("div",pt,[l("div",null,[l("label",mt," 楼梯层数: "+x(v.value),1),p(X,{modelValue:v.value,"onUpdate:modelValue":e[0]||(e[0]=n=>v.value=n),min:3,max:15,step:1,onChange:j},null,8,["modelValue"])]),p(W,{type:"primary",class:"w-full",onClick:J},{default:_(()=>e[5]||(e[5]=[I(" 计算方式 ")])),_:1,__:[5]})])]),l("div",yt,[e[10]||(e[10]=l("h3",{class:"text-lg font-semibold mb-4 text-gray-800"},"步骤控制",-1)),l("div",_t,[p(W,{disabled:!U.value,onClick:O},{default:_(()=>e[7]||(e[7]=[I("上一步")])),_:1,__:[7]},8,["disabled"]),p(W,{disabled:!q.value,onClick:R},{default:_(()=>e[8]||(e[8]=[I("下一步")])),_:1,__:[8]},8,["disabled"]),p(W,{type:m.value?"danger":"success",onClick:K},{default:_(()=>[I(x(m.value?"暂停":"播放"),1)]),_:1},8,["type"]),p(W,{onClick:j},{default:_(()=>e[9]||(e[9]=[I("重新开始")])),_:1,__:[9]})]),l("div",xt," 步骤: "+x(c.value+1)+" / "+x(Math.max(u.value.length,1)),1)]),l("div",bt,[e[11]||(e[11]=l("h3",{class:"text-lg font-semibold mb-4 text-gray-800"},"当前说明",-1)),l("div",wt,[l("p",$t,x(S.value),1)])]),e[12]||(e[12]=lt('<div class="bg-white p-4 rounded-lg shadow" data-v-188b9845><h3 class="text-lg font-semibold mb-4 text-gray-800" data-v-188b9845>算法原理</h3><div class="algorithm-explanation" data-v-188b9845><p class="text-sm text-gray-600 mb-2" data-v-188b9845>动态规划方程:</p><p class="text-md font-mono text-blue-600 mb-2" data-v-188b9845> f(n) = f(n-1) + f(n-2) </p><p class="text-xs text-gray-500" data-v-188b9845> 到达第n层楼梯的方式数等于到达第n-1层和第n-2层的方式数之和， 因为可以从n-1层爬1阶到达，或者从n-2层爬2阶到达。 </p><p class="text-xs text-gray-500 mt-2" data-v-188b9845> 提示: 点击楼梯可以查看从下面两层到当前层的路径关系 </p></div></div>',1))])])}}}),Wt=at(kt,[["__scopeId","data-v-188b9845"]]);export{Wt as default};
